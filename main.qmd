---
title: "entrega2"
format: html
editor: visual
---

# Carga de librerías y de datos.

```{r}
install.packages("tidyverse")
install.packages("ggridges")
install.packages("viridis")
install.packages("hrbrthemes")
library(tidyverse)
mpg_backup=mpg
mpg %>% glimpse
```

# Pregunta 1

Dibujad un gráfico que permita visualizar el número de vehículos de cada fabricante del conjunto de datos.

```{r}
mpg %>% select(c(manufacturer)) %>%
  mutate(manufacturer=str_to_title(manufacturer)) %>% 
  ggplot(aes(x=manufacturer))+
  geom_bar(fill="#005db5")+
  coord_flip()+
  labs(x="Fabricante", y="Número de vehículos")
  
```

# Pregunta 2

Dibujad un gráfico para mostrar el rendimiento medio en ciudad para cada clase.

```{r}
mpg %>% select(c(cty,class)) %>% 
  group_by(class) %>%
  mutate(class=str_to_title(class)) %>% 
  summarise(mean=mean(cty),.groups = "drop") %>% 
  ggplot(aes(x=class,y=mean,fill=class)) +
  geom_col(show.legend = FALSE) +
  labs(x="Clase", y="Media", fill="Clase")
```

# Pregunta 3

Construid un gráfico para mostrar el rendimiento medio en ciudad para cada clase y tipo de tracción simultáneamente.

```{r}
# manera 1: fusionando las variables
mpg %>% select(c(cty,drv,class)) %>% 
  group_by(class,drv) %>%
  mutate(class=str_to_title(class)) %>% 
  summarise(mean=mean(cty),.groups = "drop") %>% 
  drop_na() %>% 
  unite(col="class_drv",c(class,drv),sep="_",remove=T) %>% 
  ggplot(aes(x=class_drv,y=mean,fill=class_drv)) +
  geom_col(show.legend = FALSE)+
  coord_flip() +
  labs(x="Clase y tipo de tracción", y="Media")
```

```{r}
# manera 2: haciendo distintos graficos
mpg %>% select(c(cty,drv,class)) %>% 
  group_by(class,drv) %>%
  mutate(class=str_to_title(class)) %>% 
  summarise(mean=mean(cty),.groups = "drop") %>% 
  complete(class,drv,fill=list(mean=NA)) %>% 
  ggplot(aes(class,mean))+
  geom_col() +
  facet_grid(rows=vars(drv))+
  coord_flip() +
  labs(x="Clase", y="Media")
  
```

```{r}
mpg %>% str()
```

```{r}
mpg %>% ggplot(aes(x=class, y=cty, fill=drv)) +
    geom_boxplot(alpha=0.7) +
    stat_summary(fun.y=mean, geom="point", position=position_dodge(0.75), shape=20, size=14, color="red") +
    theme(legend.position="none") +
    scale_fill_brewer(palette="Set1")
```

## Pregunta 4

Utilizad un gráfico para mostrar la relación entre tamaño del motor y el rendimiento en carretera, para cada clase de vehículo. ¿Qué podéis observar?

Usamos un gráfico de dispersión entre las dos variables qualitativas (desplazamiento del motor y rendimiento en carretera) y coloreamos los puntos en función de la clase de vehículo. Haciendo una regresión lineal para cada clase, podemos observar que el rendimiento en carretera disminuye con un mayor desplazamiento del motor.

```{r}
mpg %>% ggplot(aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  # geom_smooth(method = "lm", se = FALSE) +
  labs(
    x = "Desplazamiento del motor (litros)",
    y = "Rendimiento en carretera (millas por galón)",
    color = "Clase de vehículo")
```

```{r}
# library
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)

# Plot
mpg %>% ggplot(aes(x = `hwy`, y = drv, fill = ..y..)) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis(name = "Temp. [F]", option = "C") +
  labs(title = 'Temperatures in Lincoln NE in 2016') +
  theme_ipsum() +
  theme(legend.position="none")
```

## Pregunta 5

Comparad la distribución del rendimiento en ciudad para distintos tipos de tracción.

En los siguientes gráficos podemos observar que los coches con tracción delantera (f) tienen por lo general un mayor rendimiento en ciudad que los coches con tracción trasera (r) o tracción en cuatro ruedas (4).

```{r}
ggplot(data = mpg, aes(x = cty)) +
  geom_histogram(aes(fill = drv), 
                 alpha = 0.5, 
                 position = "identity",
                 na.rm = TRUE) +
  labs(x = "Rendimiento en ciudad",
       y = "",
       fill = "Tipo de tracción") + 
  scale_fill_brewer(palette = "Dark2")
```

```{r}
mpg %>% ggplot(aes(x = drv, y = cty, fill = drv)) +
  geom_violin(show.legend = FALSE) + 
  scale_fill_brewer(palette = "Dark2")
```
